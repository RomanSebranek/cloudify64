{
  "inputs": {
    "dbPort": 3306,
    "agent_user": "ubuntu",
    "vm_flavor": "8f4b7ae1-b8c2-431f-bb0c-362a5ece0381",
    "vm_image": "6c3047c6-17b1-4aaf-a657-9229bb481e50",
    "docRoot": "/var/www/html",
    "memcachePort": 11211
  },
  "description": null,
  "blueprint_id": "drupal",
  "policy_types": {
    "cloudify.policies.types.host_failure": {
      "source": "https://raw.githubusercontent.com/cloudify-cosmo/cloudify-manager/3.4/resources/rest-service/cloudify/policies/host_failure.clj",
      "properties": {
        "policy_operates_on_group": {
          "default": false,
          "description": "If the policy should maintain its state for the whole group\nor each node instance individually.\n"
        },
        "is_node_started_before_workflow": {
          "default": true,
          "description": "Before triggering workflow, check if the node state is started"
        },
        "service": {
          "default": [
            "service"
          ],
          "description": "Service names whose events should be taken into consideration"
        },
        "interval_between_workflows": {
          "default": 300,
          "description": "Trigger workflow only if the last workflow was triggered earlier than interval-between-workflows seconds ago.\nif < 0  workflows can run concurrently.\n"
        }
      }
    },
    "cloudify.policies.types.ewma_stabilized": {
      "source": "https://raw.githubusercontent.com/cloudify-cosmo/cloudify-manager/3.4/resources/rest-service/cloudify/policies/ewma_stabilized.clj",
      "properties": {
        "upper_bound": {
          "default": true,
          "description": "boolean value for describing the semantics of the threshold.\nif 'true': metrics whose value is bigger than the threshold will cause the triggers to be processed.\nif 'false': metrics with values lower than the threshold will do so.\n"
        },
        "is_node_started_before_workflow": {
          "default": true,
          "description": "Before triggering workflow, check if the node state is started"
        },
        "ewma_timeless_r": {
          "default": 0.5,
          "description": "r is the ratio between successive events. The smaller it is, the smaller impact on the computed value the most recent event has.\n"
        },
        "service": {
          "default": "service",
          "description": "The service name"
        },
        "stability_time": {
          "default": 0,
          "description": "How long a threshold must be breached before the triggers will be processed"
        },
        "policy_operates_on_group": {
          "default": false,
          "description": "If the policy should maintain its state for the whole group\nor each node instance individually.\n"
        },
        "threshold": {
          "description": "The metric threshold value"
        },
        "interval_between_workflows": {
          "default": 300,
          "description": "Trigger workflow only if the last workflow was triggered earlier than interval-between-workflows seconds ago.\nif < 0  workflows can run concurrently.\n"
        }
      }
    },
    "cloudify.policies.types.threshold": {
      "source": "https://raw.githubusercontent.com/cloudify-cosmo/cloudify-manager/3.4/resources/rest-service/cloudify/policies/threshold.clj",
      "properties": {
        "is_node_started_before_workflow": {
          "default": true,
          "description": "Before triggering workflow, check if the node state is started"
        },
        "upper_bound": {
          "default": true,
          "description": "boolean value for describing the semantics of the threshold.\nif 'true': metrics whose value is bigger than the threshold will cause the triggers to be processed.\nif 'false': metrics with values lower than the threshold will do so.\n"
        },
        "service": {
          "default": "service",
          "description": "The service name"
        },
        "stability_time": {
          "default": 0,
          "description": "How long a threshold must be breached before the triggers will be processed"
        },
        "policy_operates_on_group": {
          "default": false,
          "description": "If the policy should maintain its state for the whole group\nor each node instance individually.\n"
        },
        "threshold": {
          "description": "The metric threshold value"
        },
        "interval_between_workflows": {
          "default": 300,
          "description": "Trigger workflow only if the last workflow was triggered earlier than interval-between-workflows seconds ago.\nif < 0  workflows can run concurrently.\n"
        }
      }
    },
    "scale_policy_type": {
      "source": "policies/scale.clj",
      "properties": {
        "service_selector": {
          "default": ".*",
          "description": "regular expression that selects the metric to be measured"
        },
        "scale_limit": {
          "default": 10,
          "description": "scaling limit"
        },
        "scale_direction": {
          "default": "<",
          "description": "scale up ('<') or scale down ('>')"
        },
        "policy_operates_on_group": {
          "default": true
        },
        "cooldown_time": {
          "default": 60,
          "description": "the time to wait before evaluating again after a scale"
        },
        "scale_threshold": {
          "description": "the value to trigger scaling over aggregrated moving values"
        },
        "moving_window_size": {
          "default": 10,
          "description": "the moving window for individual sources in secs"
        }
      }
    }
  },
  "outputs": {
    "endpoint": {
      "description": "My application endpoint",
      "value": {
        "drupal_url": {
          "concat": [
            "http://",
            {
              "get_attribute": [
                "apache_ip",
                "floating_ip_address"
              ]
            },
            ":",
            80
          ]
        }
      }
    }
  },
  "created_at": "2016-07-20 09:15:29.124631",
  "updated_at": "2016-07-20 09:15:29.124631",
  "id": "drupal1",
  "groups": {
    "heal_group": {
      "members": [
        "memcached_vm"
      ],
      "policies": {
        "simple_autoheal_policy": {
          "type": "cloudify.policies.types.host_failure",
          "properties": {
            "policy_operates_on_group": false,
            "is_node_started_before_workflow": true,
            "service": [
              "cpu.total.user"
            ],
            "interval_between_workflows": 60
          },
          "triggers": {
            "auto_heal_trigger": {
              "type": "cloudify.policies.triggers.execute_workflow",
              "parameters": {
                "workflow_parameters": {
                  "diagnose_value": {
                    "get_property": [
                      "SELF",
                      "diagnose"
                    ]
                  },
                  "node_instance_id": {
                    "get_property": [
                      "SELF",
                      "node_id"
                    ]
                  }
                },
                "force": false,
                "workflow": "heal",
                "socket_timeout": 1000,
                "allow_custom_parameters": false,
                "conn_timeout": 1000
              }
            }
          }
        }
      }
    },
    "scale_up_group": {
      "members": [
        "apache_vm"
      ],
      "policies": {
        "auto_scale_up": {
          "type": "scale_policy_type",
          "properties": {
            "service_selector": ".*apache_vm.*.cpu.total.user",
            "scale_limit": 5,
            "scale_direction": "<",
            "policy_operates_on_group": true,
            "cooldown_time": 60,
            "scale_threshold": 40,
            "moving_window_size": 10
          },
          "triggers": {
            "execute_scale_workflow": {
              "type": "cloudify.policies.triggers.execute_workflow",
              "parameters": {
                "workflow_parameters": {
                  "node_id": "drupal_app",
                  "scale_compute": true,
                  "delta": 1
                },
                "force": false,
                "workflow": "scale",
                "socket_timeout": 1000,
                "allow_custom_parameters": false,
                "conn_timeout": 1000
              }
            }
          }
        }
      }
    },
    "scale_down_group": {
      "members": [
        "apache_vm"
      ],
      "policies": {
        "auto_scale_down": {
          "type": "scale_policy_type",
          "properties": {
            "service_selector": ".*apache_vm.*.cpu.total.user",
            "scale_limit": 2,
            "scale_direction": ">",
            "policy_operates_on_group": true,
            "cooldown_time": 60,
            "scale_threshold": 20,
            "moving_window_size": 10
          },
          "triggers": {
            "execute_scale_workflow": {
              "type": "cloudify.policies.triggers.execute_workflow",
              "parameters": {
                "workflow_parameters": {
                  "node_id": "drupal_app",
                  "scale_compute": true,
                  "delta": -1
                },
                "force": false,
                "workflow": "scale",
                "socket_timeout": 1000,
                "allow_custom_parameters": false,
                "conn_timeout": 1000
              }
            }
          }
        }
      }
    }
  },
  "workflows": [
    {
      "created_at": null,
      "name": "restart_vms",
      "parameters": {
        "node_instance_id": {
          "default": null,
          "description": "The node instance id which will be restarted - default(null) = All instances..."
        },
        "node_id": {
          "description": "The node id whose instance will be restarted"
        },
        "my_input": {
          "default": null,
          "description": "Additional input"
        }
      }
    },
    {
      "created_at": null,
      "name": "scale",
      "parameters": {
        "scalable_entity_name": {
          "description": "Which node/group to scale. Note that the parameter specified should denote the node/group name and NOT the node/group instance id.\n"
        },
        "scale_compute": {
          "default": false,
          "description": "If a node name is passed as the `scalable_entity_name` parameter and that node is contained (transitively) within a compute node and this property is 'true', operate on the compute node instead of the specified node.\n"
        },
        "delta": {
          "default": 1,
          "description": "How many node/group instances should be added/removed. A positive number denotes increase of instances. A negative number denotes decrease of instances.\n"
        }
      }
    },
    {
      "created_at": null,
      "name": "drush_setvar",
      "parameters": {
        "variable_value": {},
        "variable_name": {}
      }
    },
    {
      "created_at": null,
      "name": "heal",
      "parameters": {
        "diagnose_value": {
          "default": "Not provided",
          "description": "Diagnosed reason of failure"
        },
        "node_instance_id": {
          "description": "Which node instance has failed"
        }
      }
    },
    {
      "created_at": null,
      "name": "update",
      "parameters": {
        "skip_uninstall": {
          "default": false
        },
        "remove_target_instance_ids": {
          "default": []
        },
        "added_instance_ids": {
          "default": []
        },
        "reduce_target_instance_ids": {
          "default": []
        },
        "reduced_instance_ids": {
          "default": []
        },
        "modified_entity_ids": {
          "default": []
        },
        "added_target_instances_ids": {
          "default": []
        },
        "update_id": {
          "default": ""
        },
        "skip_install": {
          "default": false
        },
        "removed_instance_ids": {
          "default": []
        },
        "extend_target_instance_ids": {
          "default": []
        },
        "extended_instance_ids": {
          "default": []
        }
      }
    },
    {
      "created_at": null,
      "name": "execute_operation",
      "parameters": {
        "operation_kwargs": {
          "default": {}
        },
        "node_ids": {
          "default": []
        },
        "node_instance_ids": {
          "default": []
        },
        "run_by_dependency_order": {
          "default": false
        },
        "operation": {},
        "allow_kwargs_override": {
          "default": null
        },
        "type_names": {
          "default": []
        }
      }
    },
    {
      "created_at": null,
      "name": "drush_install",
      "parameters": {
        "project_name": {}
      }
    },
    {
      "created_at": null,
      "name": "install",
      "parameters": {}
    },
    {
      "created_at": null,
      "name": "install_new_agents",
      "parameters": {
        "validate": {
          "default": true
        },
        "node_instance_ids": {
          "default": []
        },
        "install": {
          "default": true
        },
        "install_agent_timeout": {
          "default": 300
        },
        "node_ids": {
          "default": []
        }
      }
    },
    {
      "created_at": null,
      "name": "uninstall",
      "parameters": {}
    }
  ],
  "scaling_groups": {},
  "policy_triggers": {
    "cloudify.policies.triggers.execute_workflow": {
      "source": "https://raw.githubusercontent.com/cloudify-cosmo/cloudify-manager/3.4/resources/rest-service/cloudify/triggers/execute_workflow.clj",
      "parameters": {
        "workflow_parameters": {
          "default": {},
          "description": "Workflow paramters"
        },
        "force": {
          "default": false,
          "description": "Should the workflow be executed even when another execution\nfor the same workflow is currently in progress\n"
        },
        "workflow": {
          "description": "Workflow name to execute"
        },
        "socket_timeout": {
          "default": 1000,
          "description": "Socket timeout when making request to manager REST in ms"
        },
        "allow_custom_parameters": {
          "default": false,
          "description": "Should parameters not defined in the workflow parameters\nschema be accepted\n"
        },
        "conn_timeout": {
          "default": 1000,
          "description": "Connection timeout when making request to manager REST in ms"
        }
      }
    }
  }
}